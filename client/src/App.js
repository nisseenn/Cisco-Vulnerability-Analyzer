import React, { Component } from 'react';
import './App.css';
import LoaderScreen from './LoaderScreen.js';
import Navbar from './navbar.component.js'
import axios from 'axios';

class App extends Component {
    state = {
      Critical: [],
      High: [],
      Medium: [],
      Low: [],
      dhcp: [],
      dns: [],
      dosdns: [],
      dosmulti: [],
      dostcp:Â [],
      dosSC: [],
      dosIP: [],
      snmp: [],
      ftp: [],
      ipsocket: [],
      mvpn: [],
      vlan: [],
      sumVuln: [],
      dosVuln: [],
      string: [],
      ips: [],
      ipz: [],
      data: [],
      loading: true,
    };

componentDidMount = () => {
  let iosRequest = "http://localhost:3001/ios";
  let jsonRequest = "http://localhost:3001/jsonString";

  const requestOne = axios.get(iosRequest);
  const requestTwo = axios.get(jsonRequest);

  axios.all([requestOne, requestTwo])
  .then(axios.spread((...response) => {
        const res = response[0]
        const res1 = response[1]
      
        var callRez = res.data;
        var jsonString = res1.data;

        for (var i = 0; i < jsonString.length; i++) {
          var object = jsonString[i].ios;
          var ip1 = jsonString[i].ip;
          this.setState({string: [...this.state.string, object]})
          this.setState({ips: [...this.state.ips, [object, ip1]]})
          this.setState({ipz: [...this.state.ipz, ip1]})
        }

        for(var x=0; x < this.state.string.length; x++){
             for(var w = 0; w < callRez.length; w++){
                var title = callRez[w].advisoryTitle;
                 if(title.includes('DHCP')){
                   this.setState({dhcp: [...this.state.dhcp, 'DHCP']})
                 }
                 if(title.includes('DNS')){
                   this.setState({dns: [...this.state.dns, 'DNS']})
                 }
                 if(title.includes('Denial of Service' && 'DNS')){
                   this.setState({dosdns: [...this.state.dosdns, 'DNS']})
                 }
                 if(title.includes('Denial of Service' && 'Multicast Network Time Protocol')){
                   this.setState({dosmulti: [...this.state.dosmulti, 'Multicast Protocol']})
                 }
                 if(title.includes('Denial of Service' && 'TCP')){
                   this.setState({dostcp: [...this.state.dostcp, 'TCP']})
                 }
                 if(title.includes('Denial of Service' && 'Software Cluster Management Protocol')){
                   this.setState({dosSC: [...this.state.dosSC, 'Cluster Protocol']})
                 }
                 if(title.includes('Denial of Service' && 'IP Fragment')){
                   this.setState({dosIP: [...this.state.dosIP, 'IP Fragment']})
                 }
                 if(title.includes('SNMP')){
                   this.setState({snmp: [...this.state.snmp, 'SNMP']})
                 }
                 if(title.includes('FTP')){
                   this.setState({ftp: [...this.state.ftp, 'FTP']})
                 }
                 if(title.includes('IP Sockets')){
                   this.setState({ipsocket: [...this.state.ipsocket, 'IP Sockets']})
                 }
                 if(title.includes('MVPN')){
                   this.setState({mvpn: [...this.state.mvpn, 'MVPN']})
                 }
                 if(title.includes('VLAN')){
                   this.setState({vlan: [...this.state.vlan, 'VLAN']})
                 }
             }

             this.setState({dosVuln: [
              {subject: this.state.dosdns[0], A: this.state.dosdns.length},
              {subject: this.state.dosmulti[0], A: this.state.dosmulti.length},
              {subject: this.state.dostcp[0], A: this.state.dostcp.length},
              {subject: this.state.dosSC[0], A: this.state.dosSC.length},
              {subject: this.state.dosIP[0], A: this.state.dosIP.length},
              ]})

             this.setState({sumVuln: [
               {subject: this.state.dhcp[0], A: this.state.dhcp.length},
               {subject: this.state.dns[0], A: this.state.dns.length},
               {subject: this.state.snmp[0], A: this.state.snmp.length},
               {subject: this.state.ftp[0], A: this.state.ftp.length},
               {subject: this.state.ipsocket[0], A: this.state.ipsocket.length},
               {subject: this.state.mvpn[0], A: this.state.mvpn.length},
               {subject: this.state.vlan[0], A: this.state.vlan.length},
             ]})

             const doneData = [];

             for(var t=0; t < this.state.ips.length; t++){
               var ios = this.state.ips[t];
               for(var y = 0; y < ios.length; y++){
                 var eachIos = this.state.ips[t][y];
                  let count = [];
                   for(var q = 0; q < res.data.length; q++){
                     var data = res.data[q].iosRelease[0];
                     if(data === eachIos){
                       count.push(q + 1);
                       var ipp = ios[1];
                       var sum = {name: ipp, Vulnerabilities: count};
                     }
                   }
               }
               doneData.push({name: sum.name, Vulnerabilities: sum.Vulnerabilities.length})
              }

             this.setState({data: doneData});

             if(callRez.length > 1){
               this.setState({loading: false})
             }
        }

        for(var p = 0; p < callRez.length; p++){
          if(callRez[p].sir === 'Critical'){
            this.setState({Critical: this.state.Critical.concat(callRez[p])})
          }
          if (callRez[p].sir === 'High') {
            this.setState({High: this.state.High.concat(callRez[p])})
          }
          if (callRez[p].sir === 'Medium') {
            this.setState({Medium: this.state.Medium.concat(callRez[p])})
          }
          if (callRez[p].sir === 'Low') {
            this.setState({low: this.state.Low.concat(callRez[p])})
          }
        }
    // })
    }))
    .catch(error => {
       console.log(error)
    })
  }

  render() {
    if(this.state.loading === true){
      return(
        <div className="Spin">
          <LoaderScreen />
        </div>
      )
    }else{
      return (
      <div className="App">
        <Navbar
          critical={this.state.Critical}
          high={this.state.High}
          medium={this.state.Medium}
          critical1={this.state.Critical.length}
          high1={this.state.High.length}
          medium1={this.state.Medium.length}
          data={this.state.data}
          sumVuln={this.state.sumVuln}
          dosVuln={this.state.dosVuln}
          numIos={this.state.string.length}
          numIp={this.state.ipz.length}
          ips={this.state.ips}
          ipz={this.state.ipz}
        />
      </div>
    );
    }
  }
}

export default App;
