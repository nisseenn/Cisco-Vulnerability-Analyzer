import React, { Component } from 'react';
import FormControlLabel from '@material-ui/core/FormControlLabel';
import Checkbox from '@material-ui/core/Checkbox';
import FilterComponent from './FilterComponent.js';
import Typography from '@material-ui/core/Typography';
import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import CardHeader from '@material-ui/core/CardHeader';
import ExpansionPanel from './ExpansionPanel.js';

class CheckboxComponent extends Component {
  constructor(){
    super()
    this.state={
      checkedCritical: false,
      checkedHigh: false,
      checkedMedium: false,
      checkedLow: false,
      ipFilter: [],
    }
  }

  handleChange = name => event => {
    this.setState({ [name]: event.target.checked });
  };

  filterIp = (e) => {
    this.setState({ipFilter: e});
  }

  checkIos = (e, title, updated, summary) => {
    var ios = e[0];
    for(var x=0; x < this.props.ips.length; x++){
      var item = this.props.ips[x].length;
      for(var y=0; y < item; y++){
        if(ios === this.props.ips[x][0]){
          var ipaddress = this.props.ips[x][1];
          var iosRes = ios;
              if(ipaddress === this.state.ipFilter){
              return(
                <div><br /><Card className="card1">
                <CardHeader title=<Typography className="card1-header" gutterBottom variant="h5" component="h2">{title}
                </Typography> subheader={updated.split('T')[0]}/>
                <CardContent>
                <Typography className="card1-header" gutterBottom variant="title" component="h2">ios: {iosRes}</Typography>
                </CardContent>
                <CardActions className="cardaction" disableActionSpacing>
                <ExpansionPanel summarySum={summary}/>
                </CardActions>
                </Card>
                </div>
              )
            }
            else{

            }
        }
      }
    }
  }

  render() {
    if(this.state.checkedCritical === false && this.state.checkedHigh === false && this.state.checkedMedium === false){
      return (
        <div className="App">
        <div className="checkBox-wrapper">
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical" />}
              label="Critical"
              style={{fontSize: '20px'}}/>

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh" /> }
              label="High" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium" /> }
              label="Medium" />

        </div>
      </div>
      )
    }
    if(this.state.checkedCritical && this.state.checkedHigh && this.state.checkedMedium === true){
      return(
        <div className="App">
        <div className="checkBox-wrapper">
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical" />}
              label="Critical" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh" /> }
              label="High" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium" /> }
              label="Medium" />
        </div>
            <FilterComponent ip={this.props.ipz} filter={this.filterIp} selectedIp={this.state.ipFilter}/>
            <h1>Critical</h1>
            {this.props.critical.map((d, i) => (
              <div key={i}>
              <Typography className="card1-header" component="p">
                {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
             </Typography>
                </div>
              ))}

              <h1>High</h1>
              {this.props.high.map((d, i) => (
                <div key={i}>
                <Typography className="card1-header" component="p">
                  {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
               </Typography>
                  </div>
                ))}

                <h1>Medium</h1>
                {this.props.medium.map((d, i) => (
                  <div key={i}>
                  <Typography className="card1-header" component="p">
                    {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
                 </Typography>
                    </div>
                  ))}
      </div>
      )
    }
    if(this.state.checkedCritical && this.state.checkedMedium === true){
      return(
        <div className="App">
        <div className="checkBox-wrapper">
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical" />}
              label="Critical" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh" /> }
              label="High" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium" /> }
              label="Medium" />
        </div>

        <FilterComponent ip={this.props.ipz} filter={this.filterIp} selectedIp={this.state.ipFilter}/>

        <h1>Critical</h1>
        {this.props.critical.map((d, i) => (
          <div key={i}>
          <Typography className="card1-header" component="p">
            {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
         </Typography>
            </div>
          ))}
          <h1>Medium</h1>
          {this.props.medium.map((d, i) => (
            <div key={i}>
            <Typography className="card1-header" component="p">
              {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
           </Typography>
              </div>
            ))}

      </div>
      )
    }
    if(this.state.checkedCritical && this.state.checkedHigh === true){
      return(
        <div className="App">
        <div className="checkBox-wrapper">
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical" />}
              label="Critical" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh" /> }
              label="High" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium" /> }
              label="Medium" />
        </div>

        <FilterComponent ip={this.props.ipz} filter={this.filterIp} selectedIp={this.state.ipFilter}/>

        <h1>Critical</h1>
        {this.props.critical.map((d, i) => (
          <div key={i}>
          <Typography className="card1-header" component="p">
            {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
         </Typography>
            </div>
          ))}
          <h1>High</h1>
          {this.props.high.map((d, i) => (
            <div key={i}>
            <Typography className="card1-header" component="p">
              {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
           </Typography>
              </div>
            ))}

      </div>
      )
    }
    if(this.state.checkedHigh && this.state.checkedMedium === true){
      return(
      <div className="App">
        <div className="checkBox-wrapper">
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical" />}
              label="Critical" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh" /> }
              label="High" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium" /> }
              label="Medium" />
        </div>

        <FilterComponent ip={this.props.ipz} filter={this.filterIp} selectedIp={this.state.ipFilter}/>
          <div className="space-wrapper">
          <div className="high-wrapper">
            <h1 className="high-text">High</h1>
          </div>
          </div>
            {this.props.high.map((d, i) => (
              <div key={i}>
                <Typography className="card1-header" component="p">
                  {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
                </Typography>
              </div>
            ))}
            <div className="space-wrapper">
            <div className="medium-wrapper">
              <h1>Medium</h1>
            </div>
            </div>
            {this.props.medium.map((d, i) => (
              <div key={i}>
                <Typography className="card1-header" component="p">
                  {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
                </Typography>
              </div>
            ))}
        </div>
      )
    }
    if(this.state.checkedHigh === true){
      return(
        <div className="App">
        <div className="checkBox-wrapper">
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical" />}
              label="Critical" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh" /> }
              label="High" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium" /> }
              label="Medium" />
        </div>

        <FilterComponent ip={this.props.ipz} filter={this.filterIp} selectedIp={this.state.ipFilter}/>
        {this.props.high.map((d, i) => (
          <div key={i}>
          <Typography className="card1-header" component="p">
            {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
         </Typography>
            </div>
          ))}

      </div>
      )
    }
    if(this.state.checkedCritical === true){
      return (
        <div className="App">
        <div className="checkBox-wrapper">
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              className="criticalCheckbox"
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical" />}
              label="Critical" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh" /> }
              label="High" />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium" /> }
              label="Medium" />

        </div>
        <FilterComponent ip={this.props.ipz} filter={this.filterIp} selectedIp={this.state.ipFilter}/>
        {this.props.critical.map((d, i) => (
          <div key={i}>
            {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
            </div>
          ))}
      </div>
      )
    }
    if(this.state.checkedMedium === true){
      return(
        <div className="App">
          <div className="checkBox-wrapper">
            <FormControlLabel control={
              <Checkbox
                checked={this.state.checkedCritical}
                onChange={this.handleChange('checkedCritical')}
                value="checkedCritical" />}
                label="Critical" />

            <FormControlLabel control={
              <Checkbox
                checked={this.state.checkedHigh}
                onChange={this.handleChange('checkedHigh')}
                value="checkedHigh" /> }
                label="High" />

            <FormControlLabel control={
              <Checkbox
                checked={this.state.checkedMedium}
                onChange={this.handleChange('checkedMedium')}
                value="checkedMedium" /> }
                label="Medium" />
          </div>
          <FilterComponent ip={this.props.ipz} filter={this.filterIp} selectedIp={this.state.ipFilter}/>
          {this.props.medium.map((d, i) => (
            <div key={i}>
            <Typography className="card1-header" component="p">
              {this.checkIos(d.iosRelease, d.advisoryTitle, d.lastUpdated, d.summary)}
           </Typography>
              </div>
            ))}
      </div>
      )
    }
  }
}

export default CheckboxComponent
