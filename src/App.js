import React, { Component } from 'react';
import jsonString from './Nmap/outfile.json'
import './App.css';
import Nav from './Nav.js';
import CheckboxComp from './CheckboxComp.js';
import axios from 'axios';
import Typography from '@material-ui/core/Typography';
import Checkbox from '@material-ui/core/Checkbox';
import ReactMinimalPieChart from 'react-minimal-pie-chart'
import FormControlLabel from '@material-ui/core/FormControlLabel';
import Card from '@material-ui/core/Card';
import CardActions from '@material-ui/core/CardActions';
import CardContent from '@material-ui/core/CardContent';
import {
  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,
} from 'recharts';
var request = require("request");

class App extends Component {
    state = {
      gotData: [],
      Critical: [],
      High: [],
      Medium: [],
      Low: [],
      string: [],
      ips: [],
      ipz: [],
      counter: [],
      data: [],
      data1: [],
      callRespons: [],
      loading: true,
      checkedCritical: false,
      checkedHigh: false,
      checkedMedium: false,
      checkedLow: false,
    };

componentDidMount = () => {
   axios.post('https://cloudsso.cisco.com/as/token.oauth2',
    'grant_type=client_credentials&client_id=exxefret986esfy7jfjuwhr8&client_secret=hsPxtmjsSYE5FgGTJyzJwJdh'
  )
  .then((res) => {
        var accesstoken = res.data.access_token;
        for(var t = 0; t < jsonString.length; t++){
          // var ip = jsonString[t].ip;
          // this.setState({data: [...this.state.data, {name: ip, pv: 23}]})
        }
        for (var i = 0; i < jsonString.length; i++) {
          var object = jsonString[i].ios;
          var ip1 = jsonString[i].ip;
          this.setState({string: [...this.state.string, object]})
          this.setState({ips: [...this.state.ips, [object, ip1]]})
          this.setState({ipz: [...this.state.ipz, ip1]})
        }

        for(var x=0; x < this.state.string.length; x++){
          var options = { method: 'GET',
          url: 'https://api.cisco.com/security/advisories/ios?version=' + this.state.string[x],
          headers:
           {'cache-control': 'no-cache',
             authorization: 'Bearer ' + accesstoken,
             accept: 'application/json' }
           };

           request(options, (error, response, body, event) => {
             var callResponse = JSON.parse(body);
             var callRez = callResponse.advisories;

             for(var t=0; t < this.state.ips.length; t++){
               var ios = this.state.ips[t];
               for(var y = 0; y < ios.length; y++){
                 var eachIos = this.state.ips[t][y];
                   for(var q = 0; q < callResponse.advisories.length; q++){
                     var data = callResponse.advisories[q].iosRelease[0];
                     if(data === eachIos){
                       var count = q + 1;
                       var sum = {ios: eachIos, pv: count};
                     }
                   }
               }
             }
             this.setState({data1: [...this.state.data1, sum]})

             for(var q = 0; q < this.state.data1.length; q++){
               var iosCount = this.state.data1[q].ios;
               var number = this.state.data1[q].pv;

             for(var o = 0; o < this.state.ips.length; o++){
               var eachArray = this.state.ips[o][0];
               var ip = this.state.ips[o][1];
               if(eachArray === iosCount){
                 var data = {name: ip, pv: number};
               }
             }
           }
           this.setState({data: [...this.state.data, data]});
           console.log(this.state.data);


             this.setState({callRespons: callRez})

             if(callRez.length > 1){
               this.setState({loading: false})
             }

             for(var i = 0; i < callRez.length; i++){
               if(callRez[i].sir === 'Critical'){
                 this.setState({Critical: this.state.Critical.concat(callRez[i])})
               }
               if (callRez[i].sir === 'High') {
                 this.setState({High: this.state.High.concat(callRez[i])})
               }
               if (callRez[i].sir === 'Medium') {
                 this.setState({Medium: this.state.Medium.concat(callRez[i])})
               }
               if (callRez[i].sir === 'Low') {
                 this.setState({low: this.state.Low.concat(callRez[i])})
               }
             }

           })
        }
    })
    .catch(error => {
       console.log(error)
    })
  }

  handleChange = name => event => {
    this.setState({ [name]: event.target.checked });
  };

  checkIos = (e) => {
    var ios = e[0];
    for(var x=0; x < this.state.ips.length; x++){
      var item = this.state.ips[x].length;
      for(var y=0; y < item; y++){
        if(ios === this.state.ips[x][0]){
          var ipaddress = this.state.ips[x][1];
          var iosRes = ios;
          return <div><br /><Typography className="card1-header" gutterBottom variant="title" component="h2">ip adresse</Typography>
          <p>{ipaddress}</p>
          <br />
          <Typography className="card1-header" gutterBottom variant="title" component="h2">ios</Typography>
          <p>{iosRes}</p>
        </div>
        }
      }
    }
  }

  render() {
    if(this.state.loading === true){
      return(
        <div className="App">
          <Nav />
        </div>
      )
    }

    if(this.state.checkedCritical === false && this.state.checkedHigh === false && this.state.checkedMedium === false){
      return (
      <div className="App">
      <div className="checkBox-wrapper">
        <h1 className="title">CIS TG ios checker</h1>
        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedCritical}
            onChange={this.handleChange('checkedCritical')}
            value="checkedCritical"
          />
        }
        label="Critical"
        />

        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedHigh}
            onChange={this.handleChange('checkedHigh')}
            value="checkedHigh"
          /> } label="High"
        />

        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedMedium}
            onChange={this.handleChange('checkedMedium')}
            value="checkedMedium"
          /> } label="Medium"
        />
      </div>
      <div className="diagram">
        <Card className="card1">
    <CardContent>
      <Typography className="card1-header" gutterBottom variant="h5" component="h2">
   Found vulnerabilities
  </Typography>
      <div className="color1">
      </div>
      <p className="critical-text">Critical</p>
      <div className="color2">
      </div>
      <p className="critical-text">High</p>
      <div className="color3">
      </div>
      <p className="critical-text">Medium</p>
      <ReactMinimalPieChart
        data={[
          {
            title: 'Critical',
            value: this.state.Critical.length,
            color: '#C13C37'
          },
          {
            title: 'High',
            value: this.state.High.length,
            color: '#E38627'
          },
          {
            title: 'Medium',
            value: this.state.Medium.length,
            color: '#3C9349'
          }
        ]}
        label
        labelStyle={{
          fontSize: '5px',

        }}
        lineWidth={15}
        paddingAngle={5}
        lengthAngle={-360}
        style={{height: '300px'}}
        labelPosition={112}
        animate
      />
    </CardContent>
  </Card>
  <Card className="card1">
    <BarChart
            width={500}
            height={300}
            data={this.state.data}
            margin={{
              top: 5, right: 30, left: 20, bottom: 5,
            }}
          >
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis dataKey="name" />
            <YAxis />
            <Tooltip />
            <Legend />
            <Bar dataKey="pv" fill="#8884d8" />
          </BarChart>
      </Card>
  <Card className="ios-card">
    <CardContent>
      <Typography className="card1-header" gutterBottom variant="h5" component="h2">
   Number of ioses found
  </Typography>
  <ReactMinimalPieChart
    data={[{
        value: this.state.string.length,
        color: '#FF8142'
      }]}
    totalValue={5}
    lineWidth={20}
    label
    labelStyle={{
      fontSize: '20px',
    }}
    labelPosition={0}
    style={{height: '300px'}}
    animate
  />
</CardContent>
</Card>

<Card className="ip-card">
  <CardContent>
    <Typography className="card1-header" gutterBottom variant="h5" component="h2">
 Number of ips found
</Typography>
<ReactMinimalPieChart
  data={[{
      value: this.state.ipz.length,
      color: '#FFC935'
    }]}
  totalValue={5}
  lineWidth={20}
  label
  labelStyle={{
    fontSize: '20px',
  }}
  labelPosition={0}
  style={{height: '300px'}}
  animate
/>
</CardContent>
</Card>
</div>
      </div>
    );
  }

  if(this.state.checkedCritical && this.state.checkedHigh && this.state.checkedMedium === true){
    return (
    <div className="App">
      <div className="checkBox-wrapper">
        <h1 className="title">CIS TG ios checker</h1>
      <FormControlLabel control={
        <Checkbox
          checked={this.state.checkedCritical}
          onChange={this.handleChange('checkedCritical')}
          value="checkedCritical"
        />
      }
      label="Critical"
      />

      <FormControlLabel control={
        <Checkbox
          checked={this.state.checkedHigh}
          onChange={this.handleChange('checkedHigh')}
          value="checkedHigh"
        /> } label="High"
      />

      <FormControlLabel control={
        <Checkbox
          checked={this.state.checkedMedium}
          onChange={this.handleChange('checkedMedium')}
          value="checkedMedium"
        /> } label="Medium"
      />

      <h1>Critical</h1>
      {this.state.Critical.map((d, i) => (
        <div key={i}>
        <Card className="card1" key={i}>
          <CardContent>
            <Typography className="card1-header" gutterBottom variant="h5" component="h2">
         {d.advisoryTitle}
        </Typography>
        <Typography className="card1-header" gutterBottom variant="title" component="h2">
          IOS
        </Typography>
        <Typography className="card1-header" component="p">
          {this.checkIos(d.iosRelease)}
       </Typography>
          </CardContent>
          <CardActions className="cardaction" disableActionSpacing>
        <CheckboxComp summarySum={d.summary}/>
      </CardActions>
    </Card>
          </div>
        ))}

        <h1>High</h1>
        {this.state.High.map((d, i) => (
          <div key={i}>
          <Card className="card1" key={i}>
            <CardContent>
              <Typography className="card1-header" gutterBottom variant="h5" component="h2">
           {d.advisoryTitle}
          </Typography>
          <Typography className="card1-header" gutterBottom variant="title" component="h2">
            IOS
          </Typography>
          <Typography className="card1-header" component="p">
            {this.checkIos(d.iosRelease)}
         </Typography>
            </CardContent>
            <CardActions className="cardaction" disableActionSpacing>
          <CheckboxComp summarySum={d.summary}/>
        </CardActions>
      </Card>
            </div>
          ))}

          <h1>Medium</h1>
          {this.state.Medium.map((d, i) => (
            <div key={i}>
            <Card className="card1" key={i}>
              <CardContent>
                <Typography className="card1-header" gutterBottom variant="h5" component="h2">
             {d.advisoryTitle}
            </Typography>
            <Typography className="card1-header" gutterBottom variant="title" component="h2">
              IOS
            </Typography>
            <Typography className="card1-header" component="p">
              {this.checkIos(d.iosRelease)}
           </Typography>
              </CardContent>
              <CardActions className="cardaction" disableActionSpacing>
            <CheckboxComp summarySum={d.summary}/>
          </CardActions>
        </Card>
              </div>
            ))}
          </div>
    </div>
  );
    }
    if(this.state.checkedHigh && this.state.checkedMedium === true){
      return(
        <div className="App">
          <div className="checkBox-wrapper">
            <h1 className="title">CIS TG ios checker</h1>
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical"
            />
          }
          label="Critical"
          />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh"
            />
          }
          label="High"
          />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium"
            /> } label="Medium"
          />
          <h1>High</h1>
          {this.state.High.map((d, i) => (
            <div key={i}>
            <Card className="card1" key={i}>
              <CardContent>
                <Typography className="card1-header" gutterBottom variant="h5" component="h2">
             {d.advisoryTitle}
            </Typography>
            <Typography className="card1-header" gutterBottom variant="title" component="h2">
              IOS
            </Typography>
            <Typography className="card1-header" component="p">
              {this.checkIos(d.iosRelease)}
           </Typography>
              </CardContent>
              <CardActions className="cardaction" disableActionSpacing>
            <CheckboxComp summarySum={d.summary}/>
          </CardActions>
        </Card>
              </div>
            ))}

          <h1>Medium</h1>
          {this.state.Medium.map((d, i) => (
            <div key={i}>
            <Card className="card1" key={i}>
              <CardContent>
                <Typography className="card1-header" gutterBottom variant="h5" component="h2">
             {d.advisoryTitle}
            </Typography>
            <Typography className="card1-header" gutterBottom variant="title" component="h2">
              IOS
            </Typography>
            <Typography className="card1-header" component="p">
              {this.checkIos(d.iosRelease)}
           </Typography>
              </CardContent>
              <CardActions className="cardaction" disableActionSpacing>
            <CheckboxComp summarySum={d.summary}/>
          </CardActions>
        </Card>
              </div>
            ))}
          </div>
      </div>
      )
    }

    if(this.state.checkedCritical && this.state.checkedMedium === true){
      return(
        <div className="App">
          <div className="checkBox-wrapper">
            <h1 className="title">CIS TG ios checker</h1>
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical"
            />
          }
          label="Critical"
          />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh"
            />
          }
          label="High"
          />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium"
            /> } label="Medium"
          />
          <h1>Critical</h1>
          {this.state.Critical.map((d, i) => (
            <div key={i}>
            <Card className="card1" key={i}>
              <CardContent>
                <Typography className="card1-header" gutterBottom variant="h5" component="h2">
             {d.advisoryTitle}
            </Typography>
            <Typography className="card1-header" gutterBottom variant="title" component="h2">
              IOS
            </Typography>
            <Typography className="card1-header" component="p">
              {this.checkIos(d.iosRelease)}
           </Typography>
              </CardContent>
              <CardActions className="cardaction" disableActionSpacing>
            <CheckboxComp summarySum={d.summary}/>
          </CardActions>
        </Card>
              </div>
            ))}
            <h1>Medium</h1>
            {this.state.Medium.map((d, i) => (
              <div key={i}>
              <Card className="card1" key={i}>
                <CardContent>
                  <Typography className="card1-header" gutterBottom variant="h5" component="h2">
               {d.advisoryTitle}
              </Typography>
              <Typography className="card1-header" gutterBottom variant="title" component="h2">
                IOS
              </Typography>
              <Typography className="card1-header" component="p">
                {this.checkIos(d.iosRelease)}
             </Typography>
                </CardContent>
                <CardActions className="cardaction" disableActionSpacing>
              <CheckboxComp summarySum={d.summary}/>
            </CardActions>
          </Card>
                </div>
              ))}
            </div>
          </div>
      )
    }

    if(this.state.checkedCritical && this.state.checkedHigh === true){
      return(
        <div className="App">
          <div className="checkBox-wrapper">
            <h1 className="title">CIS TG ios checker</h1>
          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedCritical}
              onChange={this.handleChange('checkedCritical')}
              value="checkedCritical"
            />
          }
          label="Critical"
          />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedHigh}
              onChange={this.handleChange('checkedHigh')}
              value="checkedHigh"
            />
          }
          label="High"
          />

          <FormControlLabel control={
            <Checkbox
              checked={this.state.checkedMedium}
              onChange={this.handleChange('checkedMedium')}
              value="checkedMedium"
            /> } label="Medium"
          />
          <h1>Critical</h1>
          {this.state.Critical.map((d, i) => (
            <div key={i}>
            <Card className="card1" key={i}>
              <CardContent>
                <Typography className="card1-header" gutterBottom variant="h5" component="h2">
             {d.advisoryTitle}
            </Typography>
            <Typography className="card1-header" gutterBottom variant="title" component="h2">
              IOS
            </Typography>
            <Typography className="card1-header" component="p">
              {this.checkIos(d.iosRelease)}
           </Typography>
              </CardContent>
              <CardActions className="cardaction" disableActionSpacing>
            <CheckboxComp summarySum={d.summary}/>
          </CardActions>
        </Card>
              </div>
            ))}
            <h1>High</h1>
            {this.state.High.map((d, i) => (
              <div key={i}>
              <Card className="card1" key={i}>
                <CardContent>
                  <Typography className="card1-header" gutterBottom variant="h5" component="h2">
               {d.advisoryTitle}
              </Typography>
              <Typography className="card1-header" gutterBottom variant="title" component="h2">
                IOS
              </Typography>
              <Typography className="card1-header" component="p">
                {this.checkIos(d.iosRelease)}
             </Typography>
                </CardContent>
                <CardActions className="cardaction" disableActionSpacing>
              <CheckboxComp summarySum={d.summary}/>
            </CardActions>
          </Card>
                </div>
              ))}
            </div>
          </div>
      )
    }

    if(this.state.checkedCritical === true){
      return(
      <div className="App">
        <div className="checkBox-wrapper">
          <h1 className="title">CIS TG ios checker</h1>
        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedCritical}
            onChange={this.handleChange('checkedCritical')}
            value="checkedCritical"
          />
        }
        label="Critical"
        />

        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedHigh}
            onChange={this.handleChange('checkedHigh')}
            value="checkedHigh"
          />
        }
        label="High"
        />

        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedMedium}
            onChange={this.handleChange('checkedMedium')}
            value="checkedMedium"
          /> } label="Medium"
        />
        {this.state.Critical.map((d, i) => (
          <div key={i}>
          <Card className="card1" key={i}>
            <CardContent>
              <Typography className="card1-header" gutterBottom variant="h5" component="h2">
           {d.advisoryTitle}
          </Typography>
          <Typography className="card1-header" component="p">
            {this.checkIos(d.iosRelease)}
         </Typography>
            </CardContent>
            <CardActions className="cardaction" disableActionSpacing>
          <CheckboxComp summarySum={d.summary}/>
        </CardActions>
      </Card>
            </div>
          ))}
        </div>
        </div>
      );
    }

    if(this.state.checkedHigh === true){
      return(
      <div className="App">
        <div className="checkBox-wrapper">
          <h1 className="title">CIS TG ios checker</h1>
        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedCritical}
            onChange={this.handleChange('checkedCritical')}
            value="checkedCritical"
          />
        } label="Critical" />

        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedHigh}
            onChange={this.handleChange('checkedHigh')}
            value="checkedHigh"
          /> } label="High"
        />

        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedMedium}
            onChange={this.handleChange('checkedMedium')}
            value="checkedMedium"
          /> } label="Medium"
        />

        {this.state.High.map((d, i) => (
          <div key={i}>
          <Card className="card1" key={i}>
            <CardContent>
              <Typography className="card1-header" gutterBottom variant="h5" component="h2">
           {d.advisoryTitle}
          </Typography>
          <Typography className="card1-header" gutterBottom variant="title" component="h2">
            IOS
          </Typography>
          <Typography className="card1-header" component="p">
            {this.checkIos(d.iosRelease)}
         </Typography>
            </CardContent>
            <CardActions className="cardaction" disableActionSpacing>
          <CheckboxComp summarySum={d.summary}/>
        </CardActions>
      </Card>
            </div>
          ))}
        </div>
        </div>
      );
    }

    if(this.state.checkedMedium === true){
      return(
      <div className="App">
        <div className="checkBox-wrapper">
          <h1 className="title">CIS TG ios checker</h1>
        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedCritical}
            onChange={this.handleChange('checkedCritical')}
            value="checkedCritical"
          />
        } label="Critical" />

        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedHigh}
            onChange={this.handleChange('checkedHigh')}
            value="checkedHigh"
          /> } label="High"
        />

        <FormControlLabel control={
          <Checkbox
            checked={this.state.checkedMedium}
            onChange={this.handleChange('checkedMedium')}
            value="checkedMedium"
          /> } label="Medium"
        />
        {this.state.Medium.map((d, i) => (
          <div key={i}>
          <Card className="card1" key={i}>
            <CardContent>
              <Typography className="card1-header" gutterBottom variant="h5" component="h2">
           {d.advisoryTitle}
          </Typography>
          <Typography className="card1-header" gutterBottom variant="title" component="h2">
            IOS
          </Typography>
          <Typography className="card1-header" component="p">
            {this.checkIos(d.iosRelease)}
         </Typography>
            </CardContent>
            <CardActions className="cardaction" disableActionSpacing>
          <CheckboxComp summarySum={d.summary}/>
        </CardActions>
      </Card>
            </div>
          ))}
        </div>
      </div>
      );
    }

  }
}

export default App;
